{"version":3,"sources":["serviceWorker.js","consent.js","survey.js","vediopage.js","welcome.js","app.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","consent","Survey","props","mturkID","src","width","height","frameborder","marginheight","marginwidth","React","Component","withRouter","VedioPage","step","newstep","this","history","push","setState","style","position","top","left","frameBorder","className","paddingBottom","paddingTop","renderComp","onClick","handleClickBack","handleClickNext","event","target","pauseVideo","Welcome","onChangeField","nam","name","val","value","errormessage","onSubmit","preventDefault","agree","loginSuccess","alert","greeting","logo","type","onChange","App","path","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7b638d1a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport './consent.css';\nexport const consent = \n\t<div>\n\t<h2>Consent Form</h2>\n\t<p>We are asking you to participate in a research study. This form is designed to give you information about this study.  </p>\n\t<p><b>Project Title:</b> Emotion Detection and Monitoring Using Wearable Devices</p>\n\t<p><b>Principal Investigator:</b> Rajalakshmi Nandakumar</p>\n\t\tComputing and Information Science/Information Science <br/>\n\t\tRajalakshmi.nandakumar@cornell.edu<br/>\t\n\t\n\t<h3> What the study is about </h3>\n\t\tThe purpose of this study is to understand how physiological signals change when people stay in different emotional states. The study will be used for predicting and monitoring emotions in a variety of contexts, the potential contexts include, monitoring people’s emotions in daily life, monitoring the student stress while doing some specific task, learning how a movie clip can influence people's emotions, building an emotion base suggestion system. Data will be collected using iPhone and apple watch. The signals collected using these devices include heart rate, ECG, ambient sound, motion, respiration signals which will all be non-intrusive.\n\n\t<h3>What we will ask you to do </h3>\n\n\t\tAfter the experiment starts, you will be asked to wear a smartwatch, download our MyResearchHub App and watch a few videos through your browser. During this time the physiological signal data include heart rate, ECG, ambient sound, \n\t\tmotion, skin temperature, skin conductance, respiration signals will be collected from mobile and wearable devices using app MyResearchHub(an app we built for the data collection on iPhone and Apple Watch). After watching each video clip, you will be asked to complete a part of the questionnaire which asks for your feeling about the video clip. In the end, you need to share the signal data to our server using secure communication channels. \n\t\t\n\t\t<h4>Note</h4>\n\t\t<ul>\n\t\t\t<li>You can leave the study at any time you want. </li>\n\t\t\t<li>We are not asking any identification information.  </li>\n\t\t\t<li>You can participate in the test at any time and space you preferred </li>\n\t\t\t<li>The data collection procedure will be fully online, no gathering is required </li>\n\t\t</ul>\n\n\t\t<h4>Time Estimation</h4>\n\t\tAround 30mins in total\n\t\t<ul>\n\t\t\t<li>5 mins: Introduction: read the guideline and the procedure and complete the consent form. </li>\n\t\t\t<li>5 mins: Download and install the MyResearchHub App</li>\n\t\t\t<li>15 mins: Data Collection: Repeat the following procedure for about 5 times\t\t\n\t\t\t\t<ul>\n\t\t\t\t\t<li> Watch 3 video clips with the wearable devices on</li>\n\t\t\t\t\t<li> Complete questionnaire questions</li>\n\t\t\t\t</ul>\n\t\t\t</li>\n\t\t\t<li>5 mins: upload the questionnaire and the physiological data and uninstall the MyResearchHub app.</li>\n\t\t</ul>\n\n\t<h3>Risks and discomforts</h3>\n\n\t\tThe videos might include political speech and public recognized horror contents that could cause strong emotions. Please undertake this study only if you are comfortable watching these contents and you can discontinue at any time of the study if you are not.\n\n\t<h3>Benefits</h3>\n\n\t\tWe will give you feedback on your current state and mind and how your results compare to those of other participants. The final results from this experiment will be posted on our webpage. The experiment is not designed to benefit you, but you may enjoy it and enjoy comparing your results with those of other participants. \n\n\t<h3>Payment for participation</h3>\n\n\t\tYou will receive a $5 cash incentive through the MTurk platform on completion of the study.\n\n\t<h3>Audio/Video Recording</h3>\n\t\t\n\t\tThe audio will be recorded during the experiment. The audio will be used for analyzing ambient noise and breathing patterns. We will not monitor any conversation and apply any language processing algorithm on the audio sample. \n\t\tAfter this study, the audio sample will be securely encrypted and stored for future research use.\n\n\t<h3>Privacy/Confidentiality </h3>\n\t\tWe will not ask you for your name and any other identifiable details besides MTurk worker ID. The MTurk worker ID will be only used for incentive payment purpose. \n\t\tAny data that we collect will be securely stored on our servers. We anticipate that your participation in this survey presents no greater risk than the everyday use of the Internet.\n\t\tTo be more specific:\n\n\t\t<ul>\n\t\t\t<li>We are not asking any identification information(except MTurkID for payment purpose) </li>\n\t\t\t<li>The research data will be de-identified.  </li>\n\t\t\t<li>The de-identified files will be stored in the encrypted Cloud file share location, Cornell Box. </li>\n\t\t\t<li>The data could only be access by the team members</li>\n\t\t</ul>\n\n\t<h3>Data Sharing</h3>\n\t\tDe-identified data from this study may be shared with the research community at large to advance science and health. We will remove or code any personal information that could identify you before files are shared with other researchers to ensure that, by current scientific standards and known methods, no one will be able to identify you from the information we share. Despite these measures, we cannot guarantee the anonymity of your personal data.\n\n\t<h3>Taking part is voluntary </h3>\n\t\tThe participation of this study is fully voluntary, you may refuse to participate before the study begins, discontinue at any time, or skip any questions/procedures that may make you feel uncomfortable.\n\n\t<h3>Contact</h3>\n\t\tIf you have questions about this research, you may contact Professor Rajalakshmi Nandakumar at following address. \n\t\t<br/>\n\t\tRajalakshmi.nandakumar@cornell.edu,Cornell Tech, 2 W Loop Rd, New York, NY 10044\n\t\t<br/>\n\t\tIf you have any questions or concerns regarding your rights as a subject in this study, you may contact the Institutional Review Board (IRB) for Human Participants at 607-255-5138 or access their website at http://www.irb.cornell.edu. You may also report your concerns or complaints anonymously through Ethicspoint online at www.hotline.cornell.edu or by calling toll free at 1-866-293-3077. Ethicspoint is an independent organization that serves as a liaison between the University and the person bringing the complaint so that anonymity can be ensured.\n\n\n\t</div>","import React from 'react';\nimport './welcome.css';\nimport {consent} from './consent.js'\nimport {Scrollbar} from 'react-scrollbars-custom'\nimport Banner from 'react-banner'\nimport 'react-banner/dist/style.css'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  withRouter\n} from \"react-router-dom\";\nimport VedioPage from './vediopage'\n\nclass Survey extends React.Component{\n\n  constructor(props){\n    super(props)\n    this.state = {\n      mturkID: props.mturkID,\n    }\n  }\n\n\n// onSubmit = (event)=>{\n//     this.props.history.push('/vediopage'); \n//             <form onSubmit={this.onSubmit}>\n//           <input type='submit' />\n//         </form>\n//   }\n\nrender() {\n\n    return (\n\n      <div>\n        \n\n\n        <iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSdvJT555FfUcCs5oXNrT273LY7cSlAv5vw0Bf1FjRepVTtpZg/viewform?embedded=true\" width=\"640\" height=\"1050\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\">Loading…</iframe>\n     </div>\n\n    );\n  }\n}\n\n\nexport default withRouter(Survey);\n\n","import React from 'react';\nimport YouTube from 'react-youtube';\nimport './vediopage.css';\nimport {consent} from './consent.js'\nimport {Scrollbar} from 'react-scrollbars-custom'\nimport Banner from 'react-banner'\nimport 'react-banner/dist/style.css'\nimport Survey from './survey';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  withRouter\n} from \"react-router-dom\";\n\n\n\nclass VedioPage extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      step: 0\n    }\n  }\n  handleClickNext() {\n    var newstep = this.state.step+1\n    if(newstep == 4){\n      this.props.history.push('/survey'); \n    }\n    this.setState({step: newstep});\n  }\n  handleClickBack() {\n    var newstep = this.state.step-1\n    if (newstep<0){\n      newstep = 0;\n    }\n    this.setState({step: newstep});\n  }\n   renderComp(){\n     if(this.state.step===0){\n        return(\n          <div>\n            <h1>1. Download MyResearchApp App from App store</h1> \n            <h1>2. Open the MyResearchApp App and nevigate to EmoResaerch, and enter your mturkID</h1> \n            <h1>3. Make sure all the access has been granted</h1>\n            <h2>4. Turn on the flashlight by cliking the flash button on the scrren.</h2>\n            <h2>5. By placing the index fingure on the wide-angle camera as well as the flash light you would be able to see the pulse on the screen</h2>\n          </div>\n        );\n      }\n      else if(this.state.step===1){\n        return(\n          <div>\n            <h1>In the next page you will see a vedio</h1>\n            <h1>click start on phone at the same time as cliking the play button on the browser</h1>\n            <h1>Please watch til the end of the vedio and wait for 20 more second before you click stop on the App</h1>\n          </div>\n        );\n      }\n      else if(this.state.step===2)\n          {return(\n            <div>\n            <h1>please click start on both of the devices, and wait for 20 more seconds after the vedio stop. Then click stop on the app</h1>\n            <figure>\n                  <iframe\n                    style={{\n                      position: \"absolute\",\n                      top: 0,\n                      left: 0,\n                      width: \"100%\",\n                      height: \"90%\"\n                    }}\n                    src={`https://www.youtube.com/embed/2g811Eo7K8U`}\n                    frameBorder=\"0\"\n                  />\n                  <figcaption>Please click the start button at the same time of the record button on the app</figcaption>\n                </figure>\n              </div>\n            );\n      }\n      else{\n        return(\n          <div>\n            <h1>Great Job!</h1>\n            <h1> Think about what emotion you have activated </h1>\n            <h1> last task is to fill out the next questionaire</h1>\n          </div>\n        );\n      }\n    }\n   \n\n  render() {\n    const opts = {\n      height: '390',\n      width: '640',\n      playerVars: {\n        // https://developers.google.com/youtube/player_parameters\n        autoplay: 1,\n      },\n    };\n \n    return (\n      <div\n        className=\"video\"\n        style={{\n          position: \"relative\",\n          paddingBottom: \"56.25%\" /* 16:9 */,\n          paddingTop: 25,\n          height: 0\n        }}\n      >\n       {this.renderComp()}\n        <button onClick={() => this.handleClickBack()}>\n          Back\n        </button>\n        <button onClick={() => this.handleClickNext()}>\n          Next\n        </button>\n      </div>\n      );\n  }\n \n\n\n  _onReady(event) {\n    // access to player in all event handlers via event.target\n    event.target.pauseVideo();\n  }\n}\n\nexport default withRouter(VedioPage);","import React from 'react';\nimport './welcome.css';\nimport {consent} from './consent.js'\nimport {Scrollbar} from 'react-scrollbars-custom'\nimport Banner from 'react-banner'\nimport 'react-banner/dist/style.css'\nimport Survey from './survey';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  withRouter\n} from \"react-router-dom\";\n\nclass Welcome extends React.Component{\n\n  constructor(props){\n    super(props)\n    this.state = {\n      mturkID: '',\n      agree: false,\n      errormessage:'',\n      loginSuccess:false\n    }\n  }\n\n  onChangeField = (event)=> {\n    let nam = event.target.name;\n    let val = event.target.value;\n    let err = '';\n    // if (nam === \"agree\") {\n    //   if (!val) {\n    //     err = <strong>You must agree the consent before participte the study</strong>;\n    //   }\n    // }\n    this.setState({errormessage: err});\n    this.setState({[nam]: val});\n  }\n\n  onSubmit = (event)=>{\n    event.preventDefault();\n    let agreed = this.state.agree;\n    if (!agreed) {\n      alert(\"You must agree the consent before participte the study\");\n    }else{\n      this.setState({loginSuccess: true});\n      this.props.history.push('/vediopage'); \n    }\n  }\n\n\n // renderComp(){\n //   if(this.state.loginSuccess===true){\n //      return(\n //    <Link to=\"/survey\"><button>Next</button></Link>\n //  );\n //    }\n //    else{\n //        return(<div>not agreed consent form yet</div>)\n //    }\n // }\n\n  render() {\n    let greeting = ''\n    if(this.state.mturkID !== ''){\n      greeting = <h1>Hello {this.state.mturkID}</h1>\n    }\n    \n    return (\n      <div className=\"Welcome tl\">\n         <Banner\n            logo=\"EmoResearch\"\n          />\n\n        <h1>Welcom to the EmoResearch</h1>\n        <p>powered by Cornell Tech</p>\n\n        {greeting}\n\n        <div className=\"consent\" >\n          {consent}\n        </div>\n         <br/>\n\n\n        <form onSubmit={this.onSubmit}>\n\n          <input type=\"checkbox\" \n            name=\"agree\" \n            onChange={this.onChangeField}\n          />\n         By ticking this box, you are agreeing to be in the study. Be sure that questions you have about the study have been answered and that you understand what you are being asked to do. You may contact the researcher if you think of a question later. You are free to leave the experiment at any time and refusing to be in the experiment.\n          \n        <br/>\n        <br/>\n\n\n          <input\n            type='submit'\n          />\n\n        </form>\n          {this.state.errormessage}\n      </div>\n\n    );\n  }\n}\n\n\n\n\n\nexport default withRouter(Welcome);\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport VedioPage from './vediopage'\nimport Welcome from './welcome';\nimport Survey from './survey';\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        \n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/survey\">\n            <Survey />\n          </Route>\n          <Route path=\"/VedioPage\">\n            <VedioPage />\n          </Route>\n          <Route path=\"/\">\n            <Welcome />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from \"./app\"\n\nimport 'tachyons'\n\nReactDOM.render(\n  <React.StrictMode>  \n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n//<Welcome number_count={'1'}/>\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}